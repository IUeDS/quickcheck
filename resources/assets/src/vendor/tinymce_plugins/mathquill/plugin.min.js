//source: https://github.com/laughinghan/tinymce_mathquill_plugin
//this file has alterations from MM. added in instructions for end-user, CSS tweaks, and upgraded for tinymce 5.
 tinymce.PluginManager.add('mathquill', function (editor, url) {
    let mathField;
    const pluginHtml = `<div class="qc-math-editor" style="all:initial;">
        <style type="text/css">
            .mq-root-block * {
                vertical-align:middle;
                text-align:center;
            }
            .qc-math-editor a:hover {
                cursor: pointer;
            }
            .qc-math-editor a {
                text-decoration: underline;
            }
        </style>
        <link rel="stylesheet" href="${url}/mathquill.css" />
        <p style="padding: 5px; font-family: Arial;">Type LaTeX and it will format itself as you type. <a href="https://en.wikipedia.org/wiki/Wikipedia:LaTeX_symbols" target="_blank">Find LaTeX symbols.</a></p>
        <span id="math-field${editor.id}" style="border:solid gray 1px; min-height: 150px; width: 100%;"></span>
        </div>
    `;

    function openDialog() {
        return editor.windowManager.open({
            title: 'Mathquill',
            body: {
                type: 'panel',
                items: [
                    {
                        type: 'htmlpanel',
                        html: pluginHtml
                    }
                ]
            },
            buttons: [
                {
                    type: 'custom',
                    name: 'action',
                    text: 'Submit',
                    primary: true,
                }
            ],
            onAction: onHide,
            size: 'normal'
        });
    }

    function onSetup(e) {
         //create the mathquill interface
         var mathquill = MathQuill.getInterface(2);
         var mathFieldSpan = document.getElementById('math-field' + editor.id);
         mathField = mathquill.MathField(mathFieldSpan, {
             spaceBehavesLikeTab: true
         });
    }

    function onAction(e) {
        mathField.latex("");

         //if we've selected an equation, we edit that.
         var sel = editor.selection.getContent();
         if (sel) {
             if (sel.substr(0, 2) === "\\(" && sel.substr(sel.length - 2, 2) === "\\)") {
                 mathField.latex(sel.substr(2, sel.length - 4));
             }
         } else {
             //if there's no selection but we're inside an equation,
             //select the equation to edit it
             var edRng = editor.selection.getRng();
             var offset = edRng.startOffset;
             var node = edRng.startContainer;
             var content = node.wholeText;
             if (!content) { return; }

             //this is a bit weird but the only way I found of getting a true offset
             for (var y = 0; y < node.parentNode.childNodes.length; y++) {
                 if (node.parentNode.childNodes[y]=== node) {break;}
                 offset += node.parentNode.childNodes[y].length;
             }

             var indexOfLb = content.substr(0,offset).lastIndexOf("\\(");
             var indexOfRb = content.substr(offset).indexOf("\\)");

             if (indexOfLb >= 0 && indexOfRb >= 0) {
                 var indexOfOffsideRb = content.substr(0, offset).lastIndexOf("\\)");
                 var indexOfOffsideLb = content.substr(offset).indexOf("\\(");

                 if (indexOfOffsideRb < indexOfLb && (indexOfOffsideLb === -1 || indexOfOffsideLb > indexOfRb)) {
                     //we're in an equation
                     //it's pitch black. you are likely to be eaten by a grue.

                     var overallIndexOfRb = offset + indexOfRb;

                     mathField.latex(content.substr(indexOfLb + 2, (overallIndexOfRb - indexOfLb) - 2));
                     var rng = document.createRange();

                     var node1 = null;
                     var node1Index = 0;
                     var node2 = null;
                     var node2Index = 0;
                     var overallLength = 0;

                     for (var i = 0; i < node.parentNode.childNodes.length; i++) {
                         var thisNode = node.parentNode.childNodes[i];
                         var len = thisNode.length;
                         if (!node1 && indexOfLb < overallLength + len) {
                             node1 = thisNode;
                             node1Index = indexOfLb - overallLength;
                         }
                         if (!node2 && overallIndexOfRb < overallLength + len) {
                             node2 = thisNode;
                             node2Index = overallIndexOfRb - overallLength;
                         }
                         if (node1 && node2) { break; }
                         overallLength += len;
                     }

                     rng.setStart(node1, node1Index);
                     //we're taking it on faith the bracket is actually in the same node, it should be but unfortunately this may cause an issue
                     rng.setEnd(node2, node2Index + 2);

                     editor.selection.setRng(rng);
                 }
             }
         }
         mathField.focus();
    }

    function onHide(instance) {
        var output = mathField.latex();
        if (output) { editor.insertContent("\\(" + mathField.latex() + "\\)"); }
        editor.focus();
        instance.close();
    }

     // Register mathquill button
     editor.ui.registry.addButton("mathquill", {
         text: 'Equation editor',
         onAction: function() {
             openDialog();
             onSetup();
             onAction();
         }
     });
 });